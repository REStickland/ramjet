from __future__ import print_function
import numpy as np
import matplotlib.pyplot as plt


class IndexTracker(object):
    def __init__(self, ax, X):
        self.ax = ax
       
        self.X = X
        rows, cols, self.slices = X.shape
        self.ind = self.slices//2

        self.im = ax.imshow(self.X[:, :, self.ind])
        self.update()

    def onscroll(self, event):
        print("%s %s" % (event.button, event.step))
        if event.button == 'up':
            self.ind = (self.ind + 1) % self.slices
        else:
            self.ind = (self.ind - 1) % self.slices
        self.update()

    def update(self):
        self.im.set_data(self.X[:, :, self.ind])
        ax.set_ylabel('slice %s' % self.ind)
        self.im.axes.figure.canvas.draw()


fig1 = fig, ax = plt.subplots(1, 1)

flux_array = np.load('/local/data/fugussd/ahussei2/ramjet/data/positive/positive/5598642947280233984_0.npy')
tracker = IndexTracker(ax, flux_array)

fig.canvas.mpl_connect('scroll_event', tracker.onscroll)
ax.set_title('Flux not normalized')


fig2 = fig, ax = plt.subplots(1, 1)


# lines of code  normalizes the flux array
 
flux_array_normalized = flux_array -  np.min(flux_array)
max_flux = np.max(flux_array_normalized)
if max_flux != 0:
    flux_array_normalized /= max_flux

tracker = IndexTracker(ax, flux_array_normalized)


fig.canvas.mpl_connect('scroll_event', tracker.onscroll)
ax.set_title('Flux normalized')
plt.show()


